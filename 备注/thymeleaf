引入外界静态资源的方式@{/xxx}，默认的静态资源的根是"static"

spring-boot项目静态文件目录：/src/java/resources/static
spring-boot项目模板文件目录：/src/java/resources/templates
spring-boot静态首页的支持，即index.html放在以下目录结构会直接映射到应用的根目录下：
    classpath:/META-INF/resources/index.html  
    classpath:/resources/index.html  
    classpath:/static/index.html  
    calsspath:/public/index.html  
    
在spring-boot下，默认约定了Controller试图跳转中thymeleaf模板文件的的前缀prefix是”classpath:/templates/”,后缀suffix是”.html”
这个在application.properties配置文件中是可以修改的。
如下配置可以修改试图跳转的前缀和后缀
    spring.thymeleaf.prefix: /templates/  
    spring.thymeleaf.suffix: .html  
    
原来关于spring-boot-starter-web等的依赖就可以去掉了，因为spring-boot-starter-thymeleaf是包含这些依赖的。
而关于jsp的依赖也可以去掉了，因为我们已经完全抛弃jsp了。

Spring-boot使用thymeleaf时默认是有缓存的，即你把一个页面代码改了不会刷新页面的效果，你必须重新运行spring-boot的main()方法才能看到页面更改的效果。我们可以把thymeleaf的缓存关掉，用于支持页面修改后重新发布到spring-boot内嵌的tomcat中去。在application.properties配置文件中加入以下配置。
    # Allow Thymeleaf templates to be reloaded at dev time  
    spring.thymeleaf.cache: false  
    server.tomcat.access_log_enabled: true  
    server.tomcat.basedir: target/tomcat  
    
thymeleaf常用基础知识点

1、在html页面中引入thymeleaf命名空间，即<html xmlns:th=http://www.thymeleaf.org></html>，此时在html模板文件中动态的属性使用th:命名空间修饰

2、引用静态资源文件，比如CSS和JS文件，语法格式为“@{}”，如@{/js/blog/blog.js}会引入/static目录下的/js/blog/blog.js文件

3、访问spring-mvc中model的属性，语法格式为“${}”，如${user.id}可以获取model里的user对象的id属性

4、循环，在html的标签中，加入th:each=“value:${list}”形式的属性，如<span th:each=”user:${users}”></span>可以迭代users的数据

5、判断，在html标签中，加入th:if=”表达式”可以根据条件显示html元素
<span th:if="${not #lists.isEmpty(blog.publishTime)}">
<span id="publishtime" th:text="${#dates.format(blog.publishTime, 'yyyy-MM-dd HH:mm:ss')}"></span>
</span>
以上代码表示若blog.publishTime时间不为空，则显示时间

6、时间的格式化，
${#dates.format(blog.publishTime,'yyyy-MM-dd HH:mm:ss')}
表示将时间格式化为”yyyy-MM-dd HH:mm:ss”格式化写法与Java格式化Date的写法是一致的。

7、字符串拼接，有两种形式
比如拼接这样一个URL:/blog/delete/{blogId}
第一种：th:href="'/blog/delete/' + ${blog.id }"
第二种：th:href="${'/blog/delete/' + blog.id }" 

数据访问模式：
${...}，变量引用模式，比如${myBean.property}，如果用springDialect，则使用的是spring EL，如果不用spring，则用的ognl。
*{...}，选择表达式，一般是th:object之后，直接取object中的属性。当没有选取对象时，其功能等同${...},*{firstName}也等同于${#object.firstName},#object代表当前选择的对象。
@{...}链接url的表达式。th:href="@{/xxx/aa.do(id=${o.id})"，会自动进行url-encoding的处理。@{...}内部可以是需要计算的表达式，比如：
th:href=”@{'/details/'+${user.login}(orderId=${o.id})}"
#{...}，i18n，国际化。
需要注意的：
#{${welcomeMsgKey}(${session.user.name})}：i18n message支持占位。各个表达式支持嵌套。

表达式基本对象：
#ctx：context object
#root或者#vars
#locale
#httpServletRequest
#httpSession

表达式功能对象：
#dates：java.util.Date的功能方法类。
#calendars:类似#dates，面向java.util.Calendar
#numbers:格式化数字的功能方法类。
#strings：字符串对象的功能类，contains,startWiths,prepending/appending等等。
#objects:对objects的功能类操作。
#bools:对布尔值求值的功能方法。
#arrays：对数组的功能类方法。
#lists:对lists功能类方法
#sets
#maps
#aggregates:对数组或者集合创建聚合的功能方法，
th:text="${#aggregates.sum(o.orderLines.{purchasePrice * amount})}"

#messages:在变量表达式中获取外部信息的功能类方法。
#ids：处理可能重复的id属性的功能类方法。


条件操作：
(if)?(then):满足条件，执行then。
(if)?(then):(else)
(value)?:(defalutValue)


一些标签：
th:text="${data}",将data的值替换该属性所在标签的body。字符常量要用引号，比如th:text="'hello world'",th:text="2011+3",th:text="'my name is '+${user.name}"
th:utext，和th:text的区别是"unescaped text"。
th:with,定义变量，th:with="isEven=${prodStat.count}%2==0"，定义多个变量可以用逗号分隔。
th:attr，设置标签属性，多个属性可以用逗号分隔，比如th:attr="src=@{/image/aa.jpg},title=#{logo}"，此标签不太优雅，一般用的比较少。
th:[tagAttr],设置标签的各个属性，比如th:value,th:action等。
可以一次设置两个属性，比如：th:alt-title="#{logo}"
对属性增加前缀和后缀，用th:attrappend，th:attrprepend,比如：th:attrappend="class=${' '+cssStyle}"
对于属性是有些特定值的，比如checked属性，thymeleaf都采用bool值，比如th:checked=${user.isActive}
th:each, 循环，<tr th:each="user,userStat:${users}">,userStat是状态变量，有 index,count,size,current,even,odd,first,last等属性，如果没有显示设置状态变量，thymeleaf会默 认给个“变量名+Stat"的状态变量。
th:if or th:unless，条件判断，支持布尔值，数字（非零为true)，字符，字符串等。
th:switch，th:case，选择语句。 th:case="*"表示default case。
th:fragment，th:include,th:substituteby:fragment为片段标记，指定一个模板内一部分代码为一个片段，然后在其它的页面中用th:include或th:substituteby进行包含。
包含的格式为，格式内可以为表达式，比如th:include="footer::$(user.logined)?'logined':'notLogin'"：
"templatename::fragname"，指定模板内的指定片段。
"templateName::[domselector]"，指定模板的dom selector，被包含的模板内不需要th:fragment.
”templatename"，包含整个模板。
th:include和th:substituteby的区别在于前者包含片段的内容到当前标签内，后者是用整个片段（内容和上一层）替换当前标签（不仅仅是标签内容）。
th:remove="all|body|tag|all-but-first"，一般用于将mock数据在真实环境中移除，all表示移除标签以及标签内容，body只移除内容，tag只移除所属标签，不移除内容，all-but-first，除第一条外其它不移除。


由 于一个标签内可以包含多个th:x属性，其先后顺序为：include,each,if/unless/switch/case,with,attr /attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove。

