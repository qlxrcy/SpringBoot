Shiro内置的FilterChain

Filter Name
	

Class

anon
	

org.apache.shiro.web.filter.authc.AnonymousFilter

authc
	

org.apache.shiro.web.filter.authc.FormAuthenticationFilter

authcBasic
	

org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter

perms
	

org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter

port
	

org.apache.shiro.web.filter.authz.PortFilter

rest
	

org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter

roles
	

org.apache.shiro.web.filter.authz.RolesAuthorizationFilter

ssl
	

org.apache.shiro.web.filter.authz.SslFilter

user
	

org.apache.shiro.web.filter.authc.UserFilter

anon:所有url都都可以匿名访问;

authc: 需要认证才能进行访问;

user:配置记住我或认证通过可以访问；

这几个是我们会用到的，在这里说明下，其它的请自行查询文档进行学习。

这时候我们运行程序，访问/index页面我们会发现自动跳转到了login页面，当然这个时候输入账号和密码是无法进行访问的。下面这才是重点：任何身份认证，如何权限控制。

 

(c) 身份认证

      在认证、授权内部实现机制中都有提到，最终处理都将交给Real进行处理。因为在Shiro中，最终是通过Realm来获取应用程序中的用户、角色及权限信息的。通常情况下，在Realm中会直接从我们的数据源中获取Shiro需要的验证信息。可以说，Realm是专用于安全框架的DAO.

认证实现

Shiro的认证过程最终会交由Realm执行，这时会调用Realm的getAuthenticationInfo(token)方法。

该方法主要执行以下操作:

1、检查提交的进行认证的令牌信息

2、根据令牌信息从数据源(通常为数据库)中获取用户信息

3、对用户信息进行匹配验证。

4、验证通过将返回一个封装了用户信息的AuthenticationInfo实例。

5、验证失败则抛出AuthenticationException异常信息。
